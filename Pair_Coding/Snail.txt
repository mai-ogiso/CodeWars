let firstMatrix = {
    matrix: [
        [1,2,3],
        [4,5,6],
        [7,8,9]
    ],
    result: [1,2,3,6,9,8,7,4,5]

}

let secondMatrix = {
    matrix: [
        [1,2,3,4],
        [5,6,7,8],
        [9,10,11,12],
        [13,14,15,16]
    ],
    result: [1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]
}

let thirdMatrix = {
    matrix: [
        [1,2,3,4,5],
        [6,7,8,9,10],
        [11,12,13,14,15],
        [16,17,18,19,20],
        [21,22,23,24,25]
    ],
    result: [1,2,3,4,5,10,15,20,25,24,23,22,21,16,11,6,7,8,9,13,18,17,12,13]
}

const testFunction = yourFunction => {
    let first = yourFunction(firstMatrix.matrix).join("") == firstMatrix.result.join("")
    console.log(first ? "3x3 Passed!" : "3x3 Failed...")
    let second = yourFunction(secondMatrix.matrix).join("") == secondMatrix.result.join("")
    console.log(second ? "4x4 Passed!" : "4x4 Failed...")
    let third = yourFunction(thirdMatrix.matrix).join("") == thirdMatrix.result.join("")
    console.log(first ? "5x5 Passed!" : "5x5 Failed...")
    let fourth = yourFunction([[1]]).join("") == [1]
    console.log(fourth ? "1x1=1 Passed!" : "1x1=1 Failed...")
    let strange = yourFunction([[163]]).join("") == [163]
    console.log(strange ? "1x1=163 Passed!" : "1x1=163 Failed...")
}

/* My tactics are as follows: 
1) Find the number of circles the matrix is made out of.
   This tells us how deep we have to go inside of the matrix
2) See if the matrix side is odd or even; the for loop stops when there is just one element left.
   By adding this, I can make sure the central square gets added in the end.
3) Inside the for loop:
   At every iteration of the loop, we get a circle of the snail shell. 
   Start and end are used to understand how deep inside the snail shell we are, to slice or select the arrays.
   Then we extract, from each side, all but the last element of the side, then we go deeper in the snail shell.
4) If the matrix was odd, add the central element and return
   else
   return the result!
*/

const snailMochi = matrix => {
    let sideLength = matrix[0].length
    let numberOfCircles = Math.ceil(sideLength/2) // The for loop doesn't work with 1x1, so this is how we add it
    let lastIs1x1 = sideLength % 2 ? true : false

    let result = []
    for (let circle = 0, start, end; circle < numberOfCircles; circle++) {
        start = circle // Circle variable name was used just for readabily; current starting point
        end = sideLength - 1 - circle  // Current ending point

        // Top row
        result = result.concat(matrix[start].slice(start, end))

        // Right column: end is the column, row is the current row.
        for (let row = start; row < end; row++) {
            result.push(matrix[row][end])
        }

        // Bottom row: you just need to add 1 to the limits that were in the top part
        result = result.concat(matrix[end].slice(start+1, end+1).reverse())

        // Left column: same as above, but going backwars so that we don't need to reverse the extracted elements
        for (let row = end; row > start; row--) {
            result.push(matrix[row][start])
        }
    }
    // Find the center of the matrix and add it to the result if last square is 1x1
    if (lastIs1x1) result.push(matrix[Math.floor(matrix.length/2)][Math.floor(sideLength/2)])
    return result
}

console.log("Mochi: ")
testFunction(snailMochi)

// ----------------------------------------------------------------------------------------------

/* My tactics is below 
1) Calculate the moveArr
  How many steps will the snail go forward until it changes direction?
  except for the first row(array[0])
2) Snail's moving depends on it's direction and the number of steps until direction changes
*/

const snailMai = array => {
    let sideLength = array[0].length;
    let directionArr =["right","down","left","up"];
    let resultArr = [];
    let moveArr =[];
  
  
    if (array.length === 1){
    //   Original:
      let firstItem = array[0].toString();
      return firstItem === "1" ? [1] : []; 
    //                      ^     ^ This is the error; returning array[0] can give a [number] or [], so you don't need to check :)
    // If the array's item is not 1, the tests Fail.

    // Fixed:
    // return [array[0]] // => [number] or []
    }
  
    // Caluculate the moveArr
    for (let i = 1 ; i <= sideLength - 1 ; i++){
      let j = 1
      while (j <= 2){
        moveArr.push(sideLength - i );
         j ++;
       }
    }
    // console.log(`moveArr: ${moveArr}`);
    // Initialize
    resultArr = array[0];
    let currentDirection = "right";
    let nextDirection = "down";
    let row = 0;
    let column = array[0].length-1;
  
    for (let i = 0; i < moveArr.length ; i++){
      currentDirection = nextDirection;
      for (let j = 1 ; j <= moveArr[i] ; j++){
        switch(currentDirection){
          case "right":
            column +=1;
            break;
          case "down":
            row += 1;
            break;
          case "left":
            column -=1;
            break;
          case "up":
            row -= 1;
            break;
        };
        resultArr.push(array[row][column])
        //console.log(`currentResultArr: ${resultArr}`)
      }
  
      // Check the next Direction 
      // Direction changes right -> bottom -> left -> up 
      nextDirection = currentDirection === "up" ? "right" 
        : directionArr[directionArr.indexOf(currentDirection) + 1];    
    }
    return resultArr;
  }

console.log("\nSnailMai:")
testFunction(snailMai)